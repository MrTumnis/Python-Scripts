#!/home/thomas/myvenv/bin/python

import sys 
import numpy
import datetime
import pandas as pd
#import decimal **Used for handling decimals used in equations 
#import rich ***Used for a better looking and colorful output. I.E errors in cli


'''Key words'''
ws_keys = ['WindSpeed', 'WS', 'windspeed', 'Ws', '_S_']
wd_keys = ['WindDirection', 'WD', 'WindDir', 'wind_direction', 'wind_dir', 'Wd', '_D_', '_D1_']
filter_keys = ['WVT', 'WVt', 'Wvt', 'wvt', 'WVC', 'WVc', 'Wvc', 'wvc']
airtemp_keys = ['Temperature', 'temperature', 'temp', 'Temp', 'AirTC', 'TC']
rh_keys = ['Relative_Humidity', 'relative_humidity', 'RH', 'rh']
rtdtemp_keys = ['RTD', 'DeltaT', 'delta', 'rtd']
sr_keys = ['Solar_Radiation', 'solar_radiation', 'Solar_Rad', 'solar_rad', 'SR', 'sr']
precip_keys = ['Precipitation', 'precipitation', 'Precip', 'precip']
bp_keys = ['Barometric_Pressure', 'barometric_pressure', 'BP', 'bp', 'baro']

def file_name():
    csv_file = input("What is the name of the .csv file? ")
    if csv_file.endswith(".csv"):
        return csv_file
    else:
        print("This is not a .csv file")
        sys.exit()

def read_file():
    file = pd.read_csv(file_name())
    file.columns = file.columns.str.strip()
    return file


'''QA checks'''
#check for missing timestamps and fill in NANs if missing
def time_check():
    df = read_file()
    if 'TIMESTAMP' in df.columns:
       #df = df.iloc[[i for i in range(len(df)) if i != 1]]
       # mask = df.index != df.index[1]
        df['TIMESTAMP'] = pd.to_datetime(df['TIMESTAMP'].iloc[1:], errors='coerce')
        df.dropna(subset=['TIMESTAMP'], inplace=True)
        df.set_index('TIMESTAMP', inplace=True)
        df_new = df.reindex(pd.date_range(start=df.index[0], end=df.index[-1], freq='15min')) 
        df_new.index.name = 'TIMESTAMP'
        return df_new

#check for high gusts and flag them with a color 
def ws_check():
    df = time_check()
    ws_columns = df[[col for col in df.columns if any(keyword in col for keyword in ws_keys)]]
    ws_list = ws_columns.columns.tolist()
    new_df = df[[(ws_list[2])]]
    print(new_df)

#check for values that do not change over time. Check for 0's and flag them with a color
def winddir_check(file):
    df = read_file()
    winddir_columns = df[[col for col in df.columns if any(keyword in col for keyword in wd_keys)]]
    return winddir_columns

#Check for low temperatures in the summer months and vice versa. Does the temperature match the 2m RTD, if it exists? Celcius or Fahrenheit? 
def temperature_check(file):
    df = read_file()
    temp_columns = df[[col for col in df.columns if any(keyword in col for keyword in airtemp_keys)]]
    return temp_columns

#Does the temperature match the AirTemp? Is the DeltaT absolute value largerds than 2? 
def rtd_check(file):
    df = read_file()
    rtd_columns = df[[col for col in df.columns if any(keyword in col for keyword in rtdtemp_keys)]]
    return rtd_columns

#If there is high %, check for rain. Did the BP drop? is it sunny (solar rad)?
def relative_humidity_check(file):
    df = read_file()
    rh_columns = df[[col for col in df.columns if any(keyword in col for keyword in rh_keys)]]
    return rh_columns

#Check if there is precip, is the RH high? Did BP drop indicating a storm?  
def precipitation_check(file):
    df = read_file()
    precip_columns = df[[col for col in df.columns if any(keyword in col for keyword in precip_keys)]]
    return precip_columns

#Check if there are readings at night. Are there gaps in the data?
def solar_radiation_check(file):
    df = read_file()
    solar_columns = df[[col for col in df.columns if any(keyword in col for keyword in sr_keys)]]
    return solar_columns

#Check for low readings and see if it has rained 
def bp_check(file):
    df = read_file()
    bp_columns = df[[col for col in df.columns if any(keyword in col for keyword in bp_keys)]]
    return bp_columns


'''Export the QA/QC file'''#specify the file and then add it here 
def QAQC_file():
    wind_check().to_csv('temp.csv')

check = str(file_name)

if  len(check) == 0:
    sys.exit()
else:    
    ws_check()
   # print(time_check())

#can be used for nesting code if you do not want it to run when calling functions from another script. 
#if __name__ == '__main__' 
